<!-- Copyright ScenPro, Inc. 2005
    $Header: /share/content/gforge/freestylesearch/freestylesearch/build.xml,v 1.9 2007-12-17 15:30:41 hebell Exp $
    $Name: not supported by cvs2svn $
-->
<project name="caDSR Freestyle Search" default="init" basedir=".">
    <description>
        Build and deploy the caDSR Freestyle Search Tool and API
    </description>
    <!-- set global properties for this build -->
    <property name="PROP.FILE" location="build.properties" />
    <property file="${PROP.FILE}" />
    <echo>
        PROP.FILE = ${PROP.FILE}

        CADSR.DS.URL = ${CADSR.DS.URL}
        CADSR.DS.USER = ${CADSR.DS.USER}
        CADSR.DS.PSWD = ${CADSR.DS.PSWD}
        CADSR.DS.TNS.ENTRY=${CADSR.DS.TNS.ENTRY}
        DEPLOY.LOCATION = ${DEPLOY.LOCATION}
        JBOSS.HOME.DIR = ${JBOSS.HOME.DIR}
        JBOSS.SERVER.DIR = ${JBOSS.SERVER.DIR}
        JBOSS.CONF.DIR = ${JBOSS.CONF.DIR}
        JBOSS.DEPLOY.DIR = ${JBOSS.DEPLOY.DIR}
        JDEBUG = ${JDEBUG}
        SCP.USER = ${SCP.USER}
        SCP.HOST = ${SCP.HOST}
        SCP.PATH = ${SCP.PATH}
        SCP.KEYFILE = ${SCP.KEYFILE}
        SCP.PASSPHRASE = ${SCP.PASSPHRASE}
        SCP.PORT = ${SCP.PORT}
        SQL.EXE = ${SQL.EXE}
        TEST = ${TEST}
        TEST.VALID.USER = ${TEST.VALID.USER}
        TEST.VALID.PSWD = ${TEST.VALID.PSWD}
        TEST.BAD.USER = ${TEST.BAD.USER}
        TEST.BAD.PSWD = ${TEST.BAD.PSWD}
        TIER = ${TIER}
        TIER.UPPER = ${TIER.UPPER}
        TIER.NAME = ${TIER.NAME}
        TOOL.BIN.DIR = ${TOOL.BIN.DIR}
        WEBLOG.DIR = ${WEBLOG.DIR}
    </echo>
    <condition property="check.props">
        <and>
            <isset property="JDEBUG" />
            <isset property="CADSR.DS.URL" />
            <isset property="CADSR.DS.USER" />
            <isset property="CADSR.DS.PSWD" />
            <isset property="CADSR.DS.TNS.ENTRY" />
            <isset property="TIER" />
            <isset property="TIER.UPPER" />
            <isset property="TIER.NAME" />
            <isset property="JBOSS.HOME.DIR" />
            <isset property="JBOSS.SERVER.DIR" />
            <isset property="JBOSS.CONF.DIR" />
            <isset property="JBOSS.DEPLOY.DIR" />
            <isset property="TOOL.BIN.DIR" />
            <isset property="TEST" />
            <isset property="TEST.VALID.USER" />
            <isset property="TEST.VALID.PSWD" />
            <isset property="TEST.BAD.USER" />
            <isset property="TEST.BAD.PSWD" />
            <isset property="WEBLOG.DIR" />
            <isset property="SCP.USER" />
            <isset property="SCP.HOST" />
            <isset property="SCP.PATH" />
            <isset property="SCP.KEYFILE" />
            <isset property="SCP.PORT" />
            <isset property="SCP.PASSPHRASE" />
            <isset property="DEPLOY.LOCATION" />
            <isset property="SQL.EXE" />
        </and>
    </condition>

    <condition property="remote.deploy">
        <equals arg1="${DEPLOY.LOCATION}" arg2="remote" />
    </condition>
    <property name="root.dir" location="${basedir}/WebRoot" />
    <property name="artifacts.dir" location="${basedir}/deployment-artifacts" />
    <property name="doc.dir" location="${artifacts.dir}/javadoc" />
    <property name="temp.dir" location="${basedir}/tmp" />
    <property name="tr.dir" location="${artifacts.dir}/test-results" />
    <property name="odi.dir" location="${artifacts.dir}/ospack" />
    <property name="web.dir" location="${root.dir}/WEB-INF" />
    <property name="classes.dir" location="${web.dir}/classes" />
    <property name="wlib.dir" location="${web.dir}/lib" />
    <property name="jsp.dir" location="${root.dir}/jsp" />
    <property name="prop.dir" location="${classes.dir}/gov/nih/nci/cadsr/freestylesearch" />
    <property name="src.dir" location="${basedir}/src" />
    <property name="lib.dir" location="${basedir}/lib" />
    <property name="scpPath.dir" location="${SCP.PATH}/freestyle" />
    <condition property="check.test">
        <equals arg1="${TEST}" arg2="true" trim="true" />
    </condition>

    <filter token="CADSR.DS.URL" value="${CADSR.DS.URL}" />
    <filter token="CADSR.DS.USER" value="${CADSR.DS.USER}" />
    <filter token="CADSR.DS.PSWD" value="${CADSR.DS.PSWD}" />
    <filter token="TEST.VALID.USER" value="${TEST.VALID.USER}" />
    <filter token="TEST.VALID.PSWD" value="${TEST.VALID.PSWD}" />
    <filter token="TEST.BAD.USER" value="${TEST.BAD.USER}" />
    <filter token="TEST.BAD.PSWD" value="${TEST.BAD.PSWD}" />
    <filter token="TIER" value="${TIER}" />
    <filter token="TIER.UPPER" value="${TIER.UPPER}" />
    <filter token="TIER.NAME" value="${TIER.NAME}" />
    <filter token="WEBLOG.DIR" value="${WEBLOG.DIR}" />

    <path id="libpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
        <fileset dir="${wlib.dir}" includes="**/*.jar" />
    </path>

    <target name="clean" depends="-prop-check" description="Deletes all project build artifacts and temporary files.">
        <echo>Remove old artifacts ...</echo>
        <delete dir="${classes.dir}" />
        <delete dir="${artifacts.dir}" />
        <delete file="${web.dir}/web.xml" />
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${artifacts.dir}" />
        <mkdir dir="${artifacts.dir}/bin" />
        <mkdir dir="${artifacts.dir}/gforge" />
        <mkdir dir="${artifacts.dir}/jboss" />
        <mkdir dir="${artifacts.dir}/sql" />
        <mkdir dir="${tr.dir}" />
    </target>

    <target name="-compile" depends="clean,-prop-check" description="Compiles the project source.">
        <echo>Compiling project source, debug is ${JDEBUG} ...</echo>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" tempdir="${temp.dir}" debug="${JDEBUG}">
            <compilerarg line="-deprecation" />
            <compilerarg line="-Xlint:unchecked" />
            <classpath refid="libpath" />
        </javac>
    </target>

    <target name="-assemble" depends="-compile,-prop-check" description="Assembles the deployment parts into the artifacts folders.">
        <echo>Assembling artifacts ...</echo>
        <delete>
            <fileset file="${prop.dir}/Freestyle.properties" />
            <fileset file="${web.dir}/web.xml" />
        </delete>
        <copy todir="${artifacts.dir}">
            <fileset file="build.xml" />
            <fileset file="${PROP.FILE}" />
        </copy>
        <copy tofile="${prop.dir}/Freestyle.properties" filtering="true">
            <fileset file="conf/template.Freestyle.properties" />
        </copy>
        <copy tofile="${web.dir}/web.xml" filtering="true">
            <fileset file="conf/template.web.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/sql/load_options.sql" filtering="true">
            <fileset file="conf/template.load_options.sql" />
        </copy>
        <copy tofile="${artifacts.dir}/jboss/freestyle-oracle-ds.xml" filtering="true">
            <fileset file="conf/template.freestyle-oracle-ds.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/jboss/freestyle-log4j-appender.xml" filtering="true">
            <fileset file="conf/template.freestyle-log4j-appender.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/jboss/freestyle-log4j-category.xml" filtering="true">
            <fileset file="conf/template.freestyle-log4j-category.xml" />
        </copy>
        <copy todir="${artifacts.dir}/bin" filtering="true">
            <fileset file="scripts/autorun.sh" />
            <fileset file="scripts/autorun.cmd" />
        </copy>
        <copy tofile="${artifacts.dir}/bin/seed.xml" filtering="true">
            <fileset file="conf/template.seed.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/bin/log4j.xml" filtering="true">
            <fileset file="conf/template.seed-log4j.xml" />
        </copy>
        <copy todir="${artifacts.dir}/bin">
            <fileset file="${lib.dir}/asm.jar" />
            <fileset file="${wlib.dir}/cacore32-client.jar" />
            <fileset file="${wlib.dir}/cglib-2.1.3.jar" />
            <fileset file="${wlib.dir}/commons-logging-1.1.jar" />
            <fileset file="${wlib.dir}/hibernate3.jar" />
            <fileset file="${lib.dir}/log4j-1.2.13.jar" />
            <fileset file="${lib.dir}/ojdbc14.jar" />
            <fileset file="${wlib.dir}/spring.jar" />
        </copy>
        <fixcrlf srcdir="${artifacts.dir}" eol="lf" includes="**/*.sh, **/*.xml, **/*.properties" />
    </target>

    <target name="-cjsp" depends="-assemble,-prop-check" description="Compiles the project JSP files to verify syntax.">
        <echo>Compiling JSP files to verify syntax ...</echo>
        <jspc srcdir="${root.dir}/jsp" destdir="${classes.dir}" compiler="jasper41">
            <classpath refid="libpath" />
            <include name="**/*.jsp" />
        </jspc>
        <javac srcdir="${classes.dir}/jsp" destdir="${classes.dir}" encoding="Cp1252">
            <classpath refid="libpath" />
            <include name="**/*.java" />
        </javac>
        <delete dir="${classes.dir}/jsp" />
        <delete dir="${classes.dir}/org" />
    </target>

    <target name="-build-jar" depends="-assemble,-prop-check" description="Build the project JAR files.">
        <echo>Building distributable JAR files ...</echo>
        <delete file="${artifacts.dir}/bin/freestylesearch.jar" />
        <delete file="${artifacts.dir}/gforge/freestylesearch.jar" />
        <cvs command="status -v" output="${classes.dir}/cvsdeploy.txt" />
        <jar destfile="${artifacts.dir}/bin/freestylesearch.jar">
            <fileset dir="${classes.dir}">
                <include name="cvsdeploy.txt" />
                <include name="gov/nih/nci/cadsr/freestylesearch/*.properties" />
                <include name="gov/nih/nci/cadsr/freestylesearch/**/*.class" />
            </fileset>
        </jar>
        <copy todir="${artifacts.dir}/gforge" file="${artifacts.dir}/bin/freestylesearch.jar"/>
        <delete file="${classes.dir}/cvsdeploy.txt" />
    </target>

    <target name="test" if="check.test" depends="-prop-check" description="Execute auto tests on the project logic.">
        <echo>Performing automated project tests ...</echo>
        <echo>TBD</echo>
    </target>

    <target name="-build-war" depends="-cjsp,-prop-check" description="Builds the project WAR file.">
        <echo>Building deployable WAR file ...</echo>
        <delete file="${artifacts.dir}/jboss/freestyle.war" />
        <cvs command="status -v" output="${jsp.dir}/cvsdeploy.txt" />
        <war destfile="${artifacts.dir}/jboss/freestyle.war" basedir="${root.dir}" update="true" webxml="${web.dir}/web.xml">
        </war>
        <delete file="${jsp.dir}/cvsdeploy.txt" />
    </target>

    <target name="build-product" depends="-build-war,-build-jar,test,-prop-check" description="Builds all project binaries.">
        <echo>Built products for ${TIER.NAME}</echo>
    </target>

    <target name="package-download" depends="clean,-prop-check" description="Packages the project for public distribution and access.">
        <echo>Building project Open Source Download package ...</echo>
        <delete dir="${odi.dir}" />
        <mkdir dir="${odi.dir}" />
        <copy todir="${odi.dir}">
            <fileset dir="${basedir}">
                <include name="build.xml" />
                <include name="template.build.properties" />
            </fileset>
        </copy>
        <mkdir dir="${odi.dir}/conf" />
        <copy todir="${odi.dir}/conf">
            <fileset dir="conf" />
        </copy>
        <mkdir dir="${odi.dir}/doc" />
        <copy todir="${odi.dir}/doc">
            <fileset dir="doc" />
        </copy>
        <mkdir dir="${odi.dir}/lib" />
        <copy todir="${odi.dir}/lib">
            <fileset dir="lib" />
        </copy>
        <mkdir dir="${odi.dir}/scripts" />
        <copy todir="${odi.dir}/scripts">
            <fileset dir="scripts" />
        </copy>
        <mkdir dir="${odi.dir}/src" />
        <copy todir="${odi.dir}/src">
            <fileset dir="src" />
        </copy>
        <mkdir dir="${odi.dir}/WebRoot" />
        <copy todir="${odi.dir}/WebRoot">
            <fileset dir="WebRoot">
                <exclude name="**/classes/**" />
                <exclude name="**/web.xml" />
            </fileset>
        </copy>

        <zip destfile="${artifacts.dir}/gforge/freestylesearch_ospack.zip">
            <zipfileset dir="${odi.dir}" />
        </zip>
        <tar destfile="${artifacts.dir}/gforge/freestylesearch_ospack.tar.gz" basedir="${odi.dir}" compression="gzip" />

        <delete dir="${odi.dir}" />
    </target>

    <target name="javadoc" depends="-prop-check" description="Build the project Javadoc.">
        <echo>Building project Javadoc ...</echo>
        <mkdir dir="${temp.dir}" />
        <delete dir="${doc.dir}" />
        <mkdir dir="${doc.dir}" />
        <mkdir dir="${artifacts.dir}" />
        <mkdir dir="${artifacts.dir}/gforge" />
        <javadoc destdir="${doc.dir}" Private="false" author="true" version="true" use="true" windowtitle="caDSR Freestyle Search API">
            <classpath refid="libpath" />
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="gov/nih/nci/cadsr/freestylesearch/**" />
            </packageset>
            <doctitle>caDSR Freestyle Search API</doctitle>
            <bottom>Copyright &#169; 2005 ScenPro, Inc. All Rights Reserved.</bottom>
            <tag name="todo" scope="all" description="To do:" />
            <group title="Source Package" packages="gov.nih.nci.cadsr.freestylesearch.tool;gov.nih.nci.cadsr.freestylesearch.tool.Test;gov.nih.nci.cadsr.freestylesearch.tool.audits;gov.nih.nci.cadsr.freestylesearch.tool.database;gov.nih.nci.cadsr.freestylesearch.tool.ui;gov.nih.nci.cadsr.freestylesearch.tool.util" />
            <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="${temp.dir}" />
        </javadoc>
        <zip destfile="${artifacts.dir}/gforge/freestylesearch_doc.zip">
            <zipfileset dir="${doc.dir}" />
        </zip>
        <delete dir="${doc.dir}" />
    </target>

    <condition property="unix.os">
        <os family="unix" />
    </condition>

    <target name="-deploy-auto-local" if="unix.os" unless="remote.deploy" depends="-deploy-binaries-local" description="Sets the file permissions after the binaries are deployed.">
        <echo>Automated local deployment ...</echo>
        <chmod file="${TOOL.BIN.DIR}/autorun.sh" perm="ugo+rx" />
        <delete file="${TOOL.BIN.DIR}/autorun.cmd" />
    </target>

    <target name="-deploy-auto-remote" if="remote.deploy" depends="-deploy-binaries-remote" description="Sets the file permissions after the binaries are deployed.">
        <echo>Automated remote deployment complete ...</echo>
    </target>

    <target name="-deploy-binaries" depends="-prop-check,-deploy-binaries-local,-deploy-binaries-remote" description="Deploys the executable product binaries to the local machine.">
        <echo>Product binaries deployed ...</echo>
    </target>

    <target name="-deploy-auto" depends="-prop-check,-deploy-auto-local,-deploy-auto-remote" description="Deploys the executable product binaries.">
        <echo>Automated deployment complete ...</echo>
    </target>

    <target name="-deploy-binaries-local" depends="-prop-check" unless="remote.deploy" description="Deploys the executable product binaries.">
        <echo>Deploying binaries to local file system ...</echo>
        <copy todir="${TOOL.BIN.DIR}">
            <fileset dir="bin" />
        </copy>
        <copy todir="${JBOSS.DEPLOY.DIR}">
            <fileset dir="jboss">
                <include name="**/*-oracle-ds.xml" />
            </fileset>
        </copy>
        <copy todir="${JBOSS.CONF.DIR}/log4j">
            <fileset dir="jboss">
                <include name="**/freestyle-log4j-*.xml" />
            </fileset>
        </copy>
        <concat destfile="log4j.xml" append="no">
            <filelist dir="${JBOSS.CONF.DIR}/log4j" files="log4j-header.xml" />
        </concat>
        <concat destfile="log4j.xml" append="yes">
            <fileset dir="${JBOSS.CONF.DIR}/log4j" includes="*-log4j-appender.xml" />
        </concat>
        <concat destfile="log4j.xml" append="yes">
            <fileset dir="${JBOSS.CONF.DIR}/log4j" includes="*-log4j-category.xml" />
        </concat>
        <concat destfile="log4j.xml" append="yes">
            <filelist dir="${JBOSS.CONF.DIR}/log4j" files="log4j-footer.xml" />
        </concat>
        <fixcrlf srcdir="." includes="log4j.xml" eol="lf" />
        <move file="log4j.xml" tofile="${JBOSS.CONF.DIR}/log4j.xml" />
        <sleep seconds="15" />
        <copy tofile="${JBOSS.DEPLOY.DIR}/freestyle.waz">
            <fileset file="jboss/freestyle.war" />
        </copy>
        <move file="${JBOSS.DEPLOY.DIR}/freestyle.waz" tofile="${JBOSS.DEPLOY.DIR}/freestyle.war" />
    </target>

    <target name="-deploy-binaries-remote" depends="-prop-check" if="remote.deploy" description="Deploys the executable product binaries to a remote machine.">
        <echo>mkdir ${scpPath.dir}</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" failonerror="false" command="mkdir -p ${scpPath.dir}" />

        <echo>Deploying binaries to remote file system "${SCP.USER}@${SCP.HOST}:${scpPath.dir}"</echo>
        <scp todir="${SCP.USER}@${SCP.HOST}:${scpPath.dir}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true">
            <fileset dir="${artifacts.dir}" includes="**/*" />
        </scp>

        <echo>cp ${scpPath.dir}/bin/* ${TOOL.BIN.DIR}/.</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${scpPath.dir}/bin/* ${TOOL.BIN.DIR}/." />
        <echo>chmod +rx ${TOOL.BIN.DIR}/autorun.sh</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="chmod +rx ${TOOL.BIN.DIR}/autorun.sh" />

        <echo>cp ${scpPath.dir}/jboss/*-oracle-ds.xml ${JBOSS.DEPLOY.DIR}/.</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${scpPath.dir}/jboss/*-oracle-ds.xml ${JBOSS.DEPLOY.DIR}/." />
        <echo>cp ${scpPath.dir}/jboss/freestyle-log4j-*.xml ${JBOSS.CONF.DIR}/log4j/.</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${scpPath.dir}/jboss/freestyle-log4j-*.xml ${JBOSS.CONF.DIR}/log4j/." />
        <echo>cat ${JBOSS.CONF.DIR}/log4j/log4j-header.xml ${JBOSS.CONF.DIR}/log4j/*-log4j-appender.xml ${JBOSS.CONF.DIR}/log4j/*-log4j-category.xml ${JBOSS.CONF.DIR}/log4j/log4j-footer.xml &gt; ${JBOSS.CONF.DIR}/log4j/log4j.xml</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cat ${JBOSS.CONF.DIR}/log4j/log4j-header.xml ${JBOSS.CONF.DIR}/log4j/*-log4j-appender.xml ${JBOSS.CONF.DIR}/log4j/*-log4j-category.xml ${JBOSS.CONF.DIR}/log4j/log4j-footer.xml > ${JBOSS.CONF.DIR}/log4j/log4j.xml" />
        <echo>mv ${JBOSS.CONF.DIR}/log4j/log4j.xml ${JBOSS.CONF.DIR}/log4j.xml</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="mv ${JBOSS.CONF.DIR}/log4j/log4j.xml ${JBOSS.CONF.DIR}/log4j.xml" />

        <sleep seconds="15" />

        <echo>cp ${scpPath.dir}/jboss/freestyle.war ${JBOSS.DEPLOY.DIR}/freestyle.waz</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${scpPath.dir}/jboss/freestyle.war ${JBOSS.DEPLOY.DIR}/freestyle.waz" />
        <echo>mv ${JBOSS.DEPLOY.DIR}/freestyle.waz ${JBOSS.DEPLOY.DIR}/freestyle.war</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="mv ${JBOSS.DEPLOY.DIR}/freestyle.waz ${JBOSS.DEPLOY.DIR}/freestyle.war" />

    </target>

    <target name="-check-sql-files" description="Find the possible SQL scripts and flag for execution.">
        <available file="${artifacts.dir}/sql/load_options.sql" property="found.load_options.sql" />
        <available file="${artifacts.dir}/sql/deactivate.sql" property="found.deactivate.sql" />
        <available file="${artifacts.dir}/sql/update_options_url.sql" property="found.update_options_url.sql" />
    </target>

    <target name="-do-load-options" if="found.load_options.sql" depends="-check-sql-files" description="Execute load_options.sql">
        <echo>Deploying caDSR database changes ${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/load_options.sql</echo>
        <exec dir="." executable="${SQL.EXE}" failonerror="true">
            <arg line="${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/load_options.sql" />
        </exec>
    </target>

    <target name="-do-update-options" if="found.update_options_url.sql" depends="-check-sql-files" description="Execute update_options_url.sql">
        <echo>Deploying caDSR database changes ${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/update_options_url.sql</echo>
        <exec dir="." executable="${SQL.EXE}" failonerror="true">
            <arg line="${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/update_options_url.sql" />
        </exec>
    </target>

    <target name="-do-deactivate-options" if="found.deactivate.sql" depends="-check-sql-files" description="Execute deactivate.sql">
        <echo>Deploying caDSR database changes ${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/deactivate.sql</echo>
        <exec dir="." executable="${SQL.EXE}" failonerror="true">
            <arg line="${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${artifacts.dir}/sql/deactivate.sql" />
        </exec>
    </target>
    
    <target name="-deploy-db" depends="-do-load-options,-do-update-options,-do-deactivate-options" description="execute database update scripts">
    </target>

    <target name="-deploy-gforge-check" description="Check for published files.">
        <condition property="deploy.gforge">
            <or>
                <available file="${basedir}/gforge/freestylesearch.jar" />
                <available file="${artifacts.dir}/gforge/freestylesearch.jar" />
                <available file="gforge/freestylesearch.jar" />
            </or>
        </condition>
    </target>

    <target name="-deploy-gforge" if="deploy.gforge" depends="-deploy-gforge-check" description="Disseminates the public project artifacts, e.g. API JAR files, Javadoc, etc.">
        <echo>
        
Artifacts exist in the ${artifacts.dir}/gforge directory and should be published.
Although this is not required for the software deployment please place these files in a location accessible by the development team.
    
        </echo>
    </target>

    <target name="deploy" depends="-deploy-auto,-deploy-db,-deploy-gforge,-prop-check" description="Deploys the project artifacts.">
        <echo>
    
Deployment is complete. Check the formal request for any special post deployment instructions.
    
        </echo>
    </target>

    <target name="build-all" depends="build-product,javadoc,package-download,-prop-check" description="Builds all project deliverables.">
        <echo>Built artifacts for ${TIER.NAME}</echo>
    </target>

    <target name="-prop-check" unless="check.props" description="Verifies the presence of all required properties.">
        <fail>Missing one or more properties, see template.build.properties for a complete list.</fail>
    </target>

    <target name="-init-check" if="check.props" description="Notify the user that all properties are present.">
        <echo>All properties are present.</echo>
    </target>

    <target name="init" depends="-prop-check,-init-check" description="The default target which only validates the presence of the script properties.">
        <fail>This build script must be run with the name of the desired target: build-all, build-product, clean, deploy, javadoc, package-download, test.</fail>
    </target>
    
    <target name="-assemble-sql" depends="clean" description="create the tier specific scripts">
        <copy tofile="${artifacts.dir}/sql/load_options.sql" filtering="true">
            <fileset file="conf/template.load_options.sql" />
        </copy>
        <copy tofile="${artifacts.dir}/sql/update_options_url.sql" filtering="true">
            <fileset file="conf/template.update_options_url.sql" />
        </copy>
        <copy todir="${artifacts.dir}/sql/.">
            <fileset file="db-sql/deactivate.sql" />
        </copy>
    </target>
    
    <target name="refresh-tier" depends="-assemble-sql,-deploy-db" description="refresh the caDSR database on a specific tier">
    </target>


</project>
